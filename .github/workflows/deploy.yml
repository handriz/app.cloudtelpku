# .github/workflows/deploy.yml
# Workflow ini akan mengotomatisasi proses deployment aplikasi Laravel ke VPS.

name: Deploy Laravel to VPS

on:
  push:
    branches:
      - main # Workflow akan berjalan setiap kali ada push ke branch 'main'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Menggunakan runner Ubuntu terbaru yang disediakan GitHub

    steps:
      # Langkah 1: Checkout kode dari repositori GitHub
      - name: Checkout Code
        uses: actions/checkout@v3

      # Langkah 2: Tambahkan Host Key VPS ke known_hosts di runner
      - name: Add SSH Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_PUBLIC_HOST_KEY }}" | sed 's/\r$//' >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # Langkah 3: Menyiapkan SSH Agent
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # --- START: Caching Dependensi untuk Mempercepat Build ---

      # Cache Composer dependencies (vendor folder)
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor # Direktori yang akan di-cache
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }} # Kunci cache berdasarkan OS dan hash composer.lock
          restore-keys: |
            ${{ runner.os }}-php- # Fallback key

      # Cache Node.js modules (node_modules folder)
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules # Direktori yang akan di-cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Kunci cache berdasarkan OS dan hash package-lock.json
          restore-keys: |
            ${{ runner.os }}-node- # Fallback key

      # --- END: Caching Dependensi ---

      # Langkah 4: Instalasi PHP Manual di runner GitHub Actions
      - name: Manual Setup PHP
        run: |
          # Perbarui daftar paket dan instal software-properties-common
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          # Tambahkan repository PPA untuk PHP (menyediakan versi PHP terbaru)
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt-get update
          # Instal PHP 8.1 dan ekstensi yang dibutuhkan untuk Laravel
          ##sudo apt-get install -y php8.1-cli php8.1-common php8.1-mysql php8.1-xml php8.1-curl php8.1-mbstring php8.1-zip php8.1-bcmath php8.1-gd
          sudo apt-get install -y php8.3-cli php8.3-common php8.3-mysql php8.3-xml php8.3-curl php8.3-mbstring php8.3-zip php8.3-bcmath php8.3-gd
          # Instal Composer
          sudo apt-get install -y composer
          # Verifikasi instalasi PHP dan Composer
          php -v
          composer -V

      # Langkah 5: Menginstal Dependensi PHP (Composer) di runner
      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader

      # Langkah 6: Menyiapkan Node.js Environment di runner
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # <--- SESUAIKAN DENGAN VERSI Node.js YANG ANDA INGINKAN UNTUK BUILD

      # Langkah 7: Menginstal Dependensi Node.js (npm) di runner
      - name: Install Node.js Dependencies
        run: npm install

      # Langkah 8: Membuat file .env di runner (SEBELUM build)
      - name: Create .env file
        ##run: printf '%s\n' "${{ secrets.DOT_ENV_CONTENT }}" > .env
        run: printf '%s\n' "${{ secrets.DOT_ENV_CONTENT }}" > .env
        env:
          DOT_ENV_CONTENT: ${{ secrets.DOT_ENV_CONTENT }}

      # Langkah 9: Mengkompilasi Aset Frontend (CSS/JS) di runner
      - name: Build Frontend Assets
        run: npm run build

      # Langkah 10: Deployment: Sinkronisasi File ke VPS menggunakan rsync langsung
      # Ini sepenuhnya bergantung pada ssh-agent untuk autentikasi.
      # Tambahan: Perintah `sudo chown` awal untuk memastikan izin direktori target.
      - name: Sync Files to VPS using rsync directly
        run: |
          # Pastikan rsync terinstal di VPS Anda. Jika belum:
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "sudo apt-get update && sudo apt-get install -y rsync"

          # Pastikan direktori target ada dan dimiliki oleh user yang benar sebelum rsync
          # Ini mengatasi `rsync error: code 23` yang terkait dengan izin.
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "\
            sudo mkdir -p /var/www/app.cloudtelpku && \
            sudo chown -R ${{ secrets.VPS_USERNAME }}:www-data /var/www/app.cloudtelpku \
          "

          # Jalankan rsync dari runner ke VPS.
          # -e ssh: memberitahu rsync untuk menggunakan SSH sebagai transport.
          # SSH_AUTH_SOCK akan otomatis digunakan oleh SSH karena sudah disiapkan oleh webfactory/ssh-agent.
           rsync -avz --delete --exclude='.git' -e "ssh -o StrictHostKeyChecking=yes" ${{ github.workspace }}/ ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/var/www/app.cloudtelpku/
            

      # Langkah 11: Jalankan Perintah Pasca-Deployment di VPS melalui SSH
      - name: Run Post-Deployment Commands on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/app.cloudtelpku # <--- SESUAIKAN DENGAN PATH FOLDER PROYEK DI VPS
            
            # --- PENTING: Lakukan CHOWN/CHMOD di sini, setelah file disalin ---
            # Pastikan user telpkudev memiliki kepemilikan penuh dan grup www-data dapat menulis.
            echo "Setting file permissions..."
            sudo chown -R telpkudev:www-data . # <--- SESUAIKAN NAMA USER DAN GROUP WEB SERVER
            sudo chmod -R 775 storage bootstrap/cache
            sudo chmod -R 755 public # Pastikan public bisa dibaca oleh web server
            echo "File permissions set."

            # Jalankan migrasi dan seeder
            echo "Running database migrations and seeding..."
            php artisan migrate:fresh --seed
            #php artisan migrate --force # Gunakan ini untuk update selanjutnya
            #php artisan db:seed # Jalankan seeder terpisah jika migrate:fresh tidak digunakan
            echo "Database migrations and seeding complete."
                       
            # Bersihkan cache Laravel
            echo "Clearing Laravel cache..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear
            php artisan optimize:clear
            echo "Laravel cache cleared."
            
            # Buat atau perbarui storage link (jika menggunakan)
            echo "Linking storage..."
            php artisan storage:link
            echo "Storage linked."
            
            # Opsional: Restart layanan web server/php-fpm jika diperlukan
            # echo "Restarting web server and PHP-FPM..."
            # sudo systemctl restart nginx
            # sudo systemctl restart php8.1-fpm # Sesuaikan versi PHP
            # echo "Web server and PHP-FPM restarted."


# .github/workflows/deploy.yml
# Workflow ini akan mengotomatisasi proses deployment aplikasi Laravel ke VPS.

name: Deploy Laravel to VPS

on:
  push:
    branches:
      - main # Workflow akan berjalan setiap kali ada push ke branch 'main'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Menggunakan runner Ubuntu terbaru yang disediakan GitHub

    steps:
      # Langkah 1: Checkout kode dari repositori GitHub
      - name: Checkout Code
        uses: actions/checkout@v3

      # Langkah 2: Menyiapkan PHP Environment di runner GitHub Actions
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1' # <--- PASTIKAN INI SESUAI DENGAN VERSI PHP DI VPS ANDA (Anda sudah cek: 8.1.2)
          extensions: dom, curl, libxml, mbstring, zip, pdo_mysql, bcmath, fileinfo, gd, imagick
          tools: composer:v2

      # Langkah 3: Menginstal Dependensi PHP (Composer) di runner
      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader

      # Langkah 4: Menyiapkan Node.js Environment di runner
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # <--- SESUAIKAN DENGAN VERSI Node.js YANG ANDA INGINKAN UNTUK BUILD

      # Langkah 5: Menginstal Dependensi Node.js (npm) di runner
      - name: Install Node.js Dependencies
        run: npm install

      # Langkah 6: Mengkompilasi Aset Frontend (CSS/JS) di runner
      - name: Build Frontend Assets
        run: npm run build

      # Langkah 7: Membuat file .env di runner (penting untuk migrasi & konfigurasi)
      - name: Create .env file
        run: echo "${{ secrets.DOT_ENV_CONTENT }}" > .env
        env:
          DOT_ENV_CONTENT: ${{ secrets.DOT_ENV_CONTENT }}

      # Langkah 8: Deployment: Sinkronisasi File ke VPS menggunakan rsync via SSH
      # Ini akan menyalin file dari runner ke VPS, mengecualikan .git
      - name: Sync Files to VPS using rsync
        uses: appleboy/ssh-action@master # <--- Menggunakan ssh-action untuk menjalankan rsync
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pastikan rsync terinstal di VPS Anda. Jika belum: sudo apt install rsync -y
            # Buat folder tujuan jika belum ada.
            mkdir -p /var/www/app.cloudtelpku
            
            # Jalankan rsync dari runner ke VPS. TIDAK ADA chown/chmod DI SINI.
            rsync -avz --delete --exclude='.git' \
                  ${{ github.workspace }}/ \
                  ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/var/www/app.cloudtelpku/
            # Perintah chown/chmod akan dijalankan di langkah berikutnya setelah rsync selesai.

      # Langkah 9: Jalankan Perintah Pasca-Deployment di VPS melalui SSH
      - name: Run Post-Deployment Commands on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/app.cloudtelpku # <--- SESUAIKAN DENGAN PATH FOLDER PROYEK DI VPS
            
            # --- PENTING: Lakukan CHOWN/CHMOD di sini, setelah file disalin ---
            # Pastikan user telpkudev memiliki kepemilikan penuh dan grup www-data dapat menulis.
            echo "Setting file permissions..."
            sudo chown -R telpkudev:www-data . # <--- SESUAIKAN NAMA USER DAN GROUP WEB SERVER
            sudo chmod -R 775 storage bootstrap/cache
            sudo chmod -R 755 public # Pastikan public bisa dibaca oleh web server
            echo "File permissions set."

            # Jalankan migrasi database
            echo "Running database migrations..."
            php artisan migrate --force
            echo "Database migrations complete."
            
            # --- JALANKAN SEEDER ---
            # Ini akan menjalankan DatabaseSeeder Anda. Tambahkan --force untuk produksi.
            echo "Running database seeder..."
            php artisan db:seed --force
            echo "Database seeding complete."
            
            # Bersihkan cache Laravel
            echo "Clearing Laravel cache..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear
            php artisan optimize:clear
            echo "Laravel cache cleared."
            
            # Buat atau perbarui storage link (jika menggunakan)
            echo "Linking storage..."
            php artisan storage:link
            echo "Storage linked."
            
            # Opsional: Restart layanan web server/php-fpm jika diperlukan
            # echo "Restarting web server and PHP-FPM..."
            # sudo systemctl restart nginx
            # sudo systemctl restart php8.1-fpm # Sesuaikan versi PHP
            # echo "Web server and PHP-FPM restarted."

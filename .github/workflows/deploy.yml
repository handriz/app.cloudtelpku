# .github/workflows/deploy.yml
# Workflow ini akan mengotomatisasi proses deployment aplikasi Laravel ke VPS.

name: Deploy Laravel to VPS

on:
  push:
    branches:
      - main # Workflow akan berjalan setiap kali ada push ke branch 'main'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Menggunakan runner Ubuntu terbaru yang disediakan GitHub

    steps:
      # Langkah 1: Checkout kode dari repositori GitHub
      - name: Checkout Code
        uses: actions/checkout@v3

      # --- BARU: Tambahkan Host Key VPS ke known_hosts di runner ---
      # Ini akan mengatasi masalah 'Host key verification failed' dengan secara eksplisit
      # menambahkan kunci host server Anda ke daftar yang dipercaya oleh runner GitHub Actions.
      - name: Add SSH Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh # Pastikan direktori .ssh ada
          # Menambahkan kunci host publik VPS ke known_hosts
          # `sed 's/\r$//'` untuk menghilangkan karakter carriage return yang mungkin dari Windows copy-paste
          echo "${{ secrets.VPS_PUBLIC_HOST_KEY }}" | sed 's/\r$//' >> ~/.ssh/known_hosts
          # Mengatur izin yang ketat untuk file known_hosts
          chmod 600 ~/.ssh/known_hosts
      # --- Akhir langkah penambahan host key ---

      # --- BARU: Menyiapkan SSH Agent ---
      # Ini akan membuat lingkungan SSH yang lebih stabil untuk autentikasi kunci pribadi.
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0 # Menggunakan action untuk mengelola ssh-agent
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          # webfactory/ssh-agent akan membuat SSH_AUTH_SOCK dan menambahkan kunci ke agent.

      # Langkah 2: Menyiapkan PHP Environment di runner GitHub Actions
      - name: Setup PHP
        uses: shivamathur/setup-php@v2
        with:
          php-version: '8.1' # <--- PASTIKAN INI SESUAI DENGAN VERSI PHP DI VPS ANDA (Anda sudah cek: 8.1.2)
          extensions: dom, curl, libxml, mbstring, zip, pdo_mysql, bcmath, fileinfo, gd, imagick
          tools: composer:v2

      # Langkah 3: Menginstal Dependensi PHP (Composer) di runner
      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader

      # Langkah 4: Menyiapkan Node.js Environment di runner
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # <--- SESUAIKAN DENGAN VERSI Node.js YANG ANDA INGINKAN UNTUK BUILD

      # Langkah 5: Menginstal Dependensi Node.js (npm) di runner
      - name: Install Node.js Dependencies
        run: npm install

      # Langkah 6: Mengkompilasi Aset Frontend (CSS/JS) di runner
      - name: Build Frontend Assets
        run: npm run build

      # Langkah 7: Membuat file .env di runner (penting untuk migrasi & konfigurasi)
      - name: Create .env file
        run: echo "${{ secrets.DOT_ENV_CONTENT }}" > .env
        env:
          DOT_ENV_CONTENT: ${{ secrets.DOT_ENV_CONTENT }}

      # Langkah 8: Deployment: Sinkronisasi File ke VPS menggunakan rsync langsung
      # Sekarang sepenuhnya bergantung pada ssh-agent untuk autentikasi.
      # rsync akan menggunakan SSH_AUTH_SOCK yang diatur oleh webfactory/ssh-agent.
      - name: Sync Files to VPS using rsync directly
        run: |
          # Perintah SSH langsung untuk membuat direktori jika belum ada
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "mkdir -p /var/www/app.cloudtelpku"

          # Jalankan rsync dari runner ke VPS.
          # -e ssh: memberitahu rsync untuk menggunakan SSH sebagai transport
          # SSH_AUTH_SOCK akan otomatis digunakan oleh SSH karena sudah disiapkan oleh webfactory/ssh-agent
          rsync -avz --delete --exclude='.git' \
                -e "ssh -o StrictHostKeyChecking=yes" \ # Pastikan ini tetap 'yes' karena kita sudah menambahkan host key
                ${{ github.workspace }}/ \
                ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/var/www/app.cloudtelpku/
            

      # Langkah 9: Jalankan Perintah Pasca-Deployment di VPS melalui SSH
      # Tetap menggunakan appleboy/ssh-action untuk menjalankan script remote yang kompleks.
      - name: Run Post-Deployment Commands on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          # Kita tidak perlu lagi parameter 'key' di sini karena ssh-agent sudah dikonfigurasi
          # dan appleboy/ssh-action akan otomatis menggunakannya.
          # Menghapus 'key' bisa mencegah konflik penanganan kunci.
          # key: ${{ secrets.SSH_PRIVATE_KEY }} # Baris ini dihapus/dikomentari
          
          # Gunakan ssh_options yang lebih ketat karena host key sudah ditambahkan
          ssh_options: "-o StrictHostKeyChecking=yes"
          script: |
            cd /var/www/app.cloudtelpku # <--- SESUAIKAN DENGAN PATH FOLDER PROYEK DI VPS
            
            echo "Setting file permissions..."
            sudo chown -R telpkudev:www-data . # <--- SESUAIKAN NAMA USER DAN GROUP WEB SERVER
            sudo chmod -R 775 storage bootstrap/cache
            sudo chmod -R 755 public # Pastikan public bisa dibaca oleh web server
            echo "File permissions set."

            echo "Running database migrations..."
            php artisan migrate --force
            echo "Database migrations complete."
            
            echo "Running database seeder..."
            php artisan db:seed --force # Menjalankan semua seeder
            echo "Database seeding complete."
            
            echo "Clearing Laravel cache..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear
            php artisan optimize:clear
            echo "Laravel cache cleared."
            
            echo "Linking storage..."
            php artisan storage:link
            echo "Storage linked."
            
            # Opsional: Restart layanan web server/php-fpm jika diperlukan
            # echo "Restarting web server and PHP-FPM..."
            # sudo systemctl restart nginx
            # sudo sudo systemctl restart php8.1-fpm # Sesuaikan versi PHP
            # echo "Web server and PHP-FPM restarted."